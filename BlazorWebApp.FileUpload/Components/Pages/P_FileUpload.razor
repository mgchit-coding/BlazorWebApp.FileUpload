@page "/fileUpload"
@using BlazorWebApp.FileUpload.Model
@using Newtonsoft.Json
@inject IDialogService DialogService
@rendermode InteractiveServer

<MudStack Style="width: 100%">
    <MudFileUpload T="IReadOnlyList<IBrowserFile>"
                   OnFilesChanged="OnInputFileChanged"
                   AppendMultipleFiles Hidden="false" Class="flex-1"
                   InputClass="absolute mud-width-full mud-height-full overflow-hidden z-20"
                   InputStyle="opacity:0"
                   @ondragenter="@SetDragClass"
                   @ondragleave="@ClearDragClass"
                   @ondragend="@ClearDragClass">
        <ButtonTemplate>
            <MudPaper Height="300px" Outlined="true" Class="@DragClass">
                <MudText Typo="Typo.h6">Drag and drop files here or click</MudText>
                @foreach (var file in fileNames)
                {
                    <MudChip Color="Color.Dark" Text="@file" />
                }
            </MudPaper>
        </ButtonTemplate>
    </MudFileUpload>
    <MudToolBar DisableGutters="true" Class="gap-4">
        @if (!_isSave)
        {
            <MudButton OnClick="Upload" Disabled="@(!fileNames.Any())" Color="Color.Primary" Variant="Variant.Filled">Upload</MudButton>
            <MudButton OnClick="Clear" Disabled="@(!fileNames.Any())" Color="Color.Error" Variant="Variant.Filled">Clear</MudButton>
        }
        else
        {
            <MudButton OnClick="Save" Color="Color.Primary" Variant="Variant.Filled">Save</MudButton>
            <MudButton OnClick="Cancel" Color="Color.Error" Variant="Variant.Filled">Cancel</MudButton>
        }
    </MudToolBar>
</MudStack>

@if (_meterBillLst is not null)
{
    <table class="table">
        <thead>
            <tr>
                <th>colum1</th>
                <th>colum2</th>
                <th>colum3</th>
                <th>colum4</th>
                <th>colum5</th>
                <th>colum6</th>
                <th>colum7</th>
                <th>colum8</th>
                <th>colum9</th>
                <th>colum10</th>
                <th>colum11</th>
                <th>colum12</th>
                <th>colum13</th>
                <th>colum14</th>
                <th>colum15</th>
                <th>colum16</th>
                <th>colum17</th>
                <th>colum18</th>
                <th>colum19</th>
                <th>colum20</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in _meterBillLst.Take(4))
            {
                <tr>
                    <td>@item.colum1</td>
                    <td>@item.colum2</td>
                    <td>@item.colum3</td>
                    <td>@item.colum4</td>
                    <td>@item.colum5</td>
                    <td>@item.colum6</td>
                    <td>@item.colum7</td>
                    <td>@item.colum8</td>
                    <td>@item.colum9</td>
                    <td>@item.colum10</td>
                    <td>@item.colum11</td>
                    <td>@item.colum12</td>
                    <td>@item.colum13</td>
                    <td>@item.colum14</td>
                    <td>@item.colum15</td>
                    <td>@item.colum16</td>
                    <td>@item.colum17</td>
                    <td>@item.colum18</td>
                    <td>@item.colum19</td>
                    <td>@item.colum20</td>
                </tr>
            }
        </tbody>
    </table>
}
@code {
    private static string DefaultDragClass = "relative rounded-lg border-2 border-dashed pa-4 mt-4 mud-width-full mud-height-full z-10";
    private string DragClass = DefaultDragClass;
    private List<string> fileNames = new List<string>();
    private byte[] fileContent;
    private IBrowserFile file;
    private List<MeterBillModel> _meterBillLst = null;
    private bool _hidePosition;
    private bool _loading;
    private IEnumerable<MeterBillModel> Elements = new List<MeterBillModel>();
    private string _fileBase64Str = "";
    private string _filePath = "";
    private bool _isSave = false;

    private async Task OnInputFileChanged(InputFileChangeEventArgs e)
    {
        file = e.File;
        ClearDragClass();
        var files = e.GetMultipleFiles();
        foreach (var file in files)
        {
            fileNames.Add(file.Name);
        }
        _fileBase64Str = await GetBase64StrAndFileName(e);
    }

    private async Task<string> GetBase64StrAndFileName(InputFileChangeEventArgs e)
    {
        string base64Str = "";
        try
        {
            var files = e.GetMultipleFiles();
            var file = files[0];
            var stream = file.OpenReadStream(maxAllowedSize: 1024 * 10000);
            byte[] bytes;
            using (var memoryStream = new MemoryStream())
            {
                await stream.CopyToAsync(memoryStream);
                bytes = memoryStream.ToArray();
            }
            base64Str = Convert.ToBase64String(bytes);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.ToString());
            throw;
        }

        return base64Str;
    }

    private async Task Upload()
    {
        var response = await _fileUpload.WriteFileToStorageAsync(file.Name, _fileBase64Str);
        _meterBillLst = JsonConvert.DeserializeObject<List<MeterBillModel>>(response.Item1);
        _filePath = response.Item2;
        Elements = _meterBillLst;
        _isSave = true;
        StateHasChanged();
        // var options = new DialogOptions { ClassBackground = "my-custom-class" };
        // var result =  DialogService.Show<FileUploadDialog>("Simple Dialog", options).Result;
        // if (!result.IsCanceled)
        // {

        // }
    }

    private async Task Save()
    {
        var model = new MeterBillViewModel
            {
                MeterBillFilePath = _filePath,
                //MeterBillFileData = _fileBase64Str,
                CreatedUserId = Guid.NewGuid().ToString()
            };
        await _fileUpload.SaveToDb(model);
        await Clear();
    }

    private async Task Cancel()
    {
        _fileUpload.DeleteFile(_filePath);
        await Clear();
    }

    private async Task Clear()
    {
        fileNames.Clear();
        ClearDragClass();
        //_fileUpload.DeleteFile(file.Name);
        // Elements = new List<MeterBillModel>();
        _meterBillLst = null;
        await Task.Delay(100);
    }

    private void SetDragClass()
    {
        DragClass = $"{DefaultDragClass} mud-border-primary";
    }

    private void ClearDragClass()
    {
        DragClass = DefaultDragClass;
    }

    //  async IAsyncEnumerable<MeterBillModel> GenerateMeterBillAsync()
    // {
    //     foreach (var item in _meterBillLst)
    //     {
    //         yield return await ProduceNumberAsync(item);
    //     }
    // }

    // private async Task<MeterBillModel> ProduceNumberAsync(MeterBillModel model)
    // {
    //     await Task.Delay(1000);
    //     return model;
    // }
}
